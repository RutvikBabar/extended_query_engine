
import os
import psycopg2
import psycopg2.extras
from prettytable import PrettyTable
from dotenv import load_dotenv

# DO NOT EDIT THIS FILE, IT IS GENERATED BY generator.py


def query():
    load_dotenv()

    user = os.getenv('DB_USER', 'postgres')
    password = os.getenv('DB_PASSWORD', '1234')
    dbname = os.getenv('DB_NAME', 'sales')

    conn = psycopg2.connect("dbname="+dbname+" user="+user+" password="+password,
                            cursor_factory=psycopg2.extras.DictCursor, host='127.0.0.1', port='5432')
    cur = conn.cursor()
    
    # For EMF queries, we need the whole sales table
    if not 'group-by-sql/4.sql'.endswith('.sql'):
        cur.execute("SELECT * FROM sales")

    _global = []
    
    # Execute raw SQL query
    sql_query = """
SELECT 
    main.cust,
    main.prod,
    q1.sum_quant AS sum_1_quant,
    q2.sum_quant AS sum_2_quant,
    q1.sum_quant + q2.sum_quant AS total_sum,
    q1.count_quant + q2.count_quant AS total_count,
    q1.sum_quant / q1.count_quant AS avg_1,
    q2.sum_quant / q2.count_quant AS avg_2
FROM 
    (SELECT DISTINCT cust, prod FROM sales) main
LEFT JOIN 
    (SELECT 
        cust, prod,
        SUM(quant) AS sum_quant,
        COUNT(quant) AS count_quant
     FROM 
        sales
     WHERE 
        month BETWEEN 1 AND 3
     GROUP BY 
        cust, prod) q1
ON 
    main.cust = q1.cust AND 
    main.prod = q1.prod
LEFT JOIN 
    (SELECT 
        cust, prod,
        SUM(quant) AS sum_quant,
        COUNT(quant) AS count_quant
     FROM 
        sales
     WHERE 
        month BETWEEN 4 AND 6
     GROUP BY 
        cust, prod) q2
ON 
    main.cust = q2.cust AND 
    main.prod = q2.prod

    """
    
    # Use a generator to efficiently process results
    def result_generator():
        cur.execute(sql_query)
        while True:
            rows = cur.fetchmany(100)  # Fetch in batches for efficiency
            if not rows:
                break
            for row in rows:
                yield row
    
    # Create PrettyTable for output
    table = PrettyTable()
    
    # Get column names from cursor description
    if cur.description:
        table.field_names = [desc[0] for desc in cur.description]
    
    # Add rows to table
    for row in result_generator():
        if isinstance(row, dict):
            table.add_row([row.get(field) for field in table.field_names])
        else:
            table.add_row(row)
    
    return table


if "__main__" == __name__:
    print(query())
    