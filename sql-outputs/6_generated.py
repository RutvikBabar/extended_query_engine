
import os
import psycopg2
import psycopg2.extras
from prettytable import PrettyTable
from dotenv import load_dotenv

# DO NOT EDIT THIS FILE, IT IS GENERATED BY generator.py


def query():
    load_dotenv()

    user = os.getenv('DB_USER', 'postgres')
    password = os.getenv('DB_PASSWORD', '1234')
    dbname = os.getenv('DB_NAME', 'sales')

    conn = psycopg2.connect("dbname="+dbname+" user="+user+" password="+password,
                            cursor_factory=psycopg2.extras.DictCursor, host='127.0.0.1', port='5432')
    cur = conn.cursor()
    
    # For EMF queries, we need the whole sales table
    if not 'group-by-sql/6.sql'.endswith('.sql'):
        cur.execute("SELECT * FROM sales")

    _global = []
    
    # Execute raw SQL query
    sql_query = """
WITH yearly_avg AS (
    SELECT 
        year,
        AVG(quant) AS avg_quant
    FROM 
        sales
    GROUP BY 
        year
)
SELECT 
    s.prod,
    s.year,
    s.month,
    monthly_filtered.sum_quant AS sum_2_quant,
    yearly_sum.sum_quant AS sum_3_quant,
    ya.avg_quant AS avg_1_quant
FROM 
    (SELECT DISTINCT prod, year, month FROM sales) s
JOIN 
    yearly_avg ya 
ON 
    s.year = ya.year
LEFT JOIN 
    (SELECT 
        s1.prod, s1.year, s1.month,
        SUM(s1.quant) AS sum_quant
     FROM 
        sales s1
     JOIN 
        yearly_avg ya 
     ON 
        s1.year = ya.year
     WHERE 
        s1.quant > ya.avg_quant
     GROUP BY 
        s1.prod, s1.year, s1.month) monthly_filtered
ON 
    s.prod = monthly_filtered.prod AND 
    s.year = monthly_filtered.year AND 
    s.month = monthly_filtered.month
LEFT JOIN 
    (SELECT 
        s2.prod, s2.year,
        SUM(s2.quant) AS sum_quant
     FROM 
        sales s2
     GROUP BY 
        s2.prod, s2.year) yearly_sum
ON 
    s.prod = yearly_sum.prod AND 
    s.year = yearly_sum.year

    """
    
    # Use a generator to efficiently process results
    def result_generator():
        cur.execute(sql_query)
        while True:
            rows = cur.fetchmany(100)  # Fetch in batches for efficiency
            if not rows:
                break
            for row in rows:
                yield row
    
    # Create PrettyTable for output
    table = PrettyTable()
    
    # Get column names from cursor description
    if cur.description:
        table.field_names = [desc[0] for desc in cur.description]
    
    # Add rows to table
    for row in result_generator():
        if isinstance(row, dict):
            table.add_row([row.get(field) for field in table.field_names])
        else:
            table.add_row(row)
    
    return table


if "__main__" == __name__:
    print(query())
    