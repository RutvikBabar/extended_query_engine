
import os
import psycopg2
import psycopg2.extras
from prettytable import PrettyTable
from dotenv import load_dotenv

# DO NOT EDIT THIS FILE, IT IS GENERATED BY generator.py


def query():
    load_dotenv()

    user = os.getenv('DB_USER', 'postgres')
    password = os.getenv('DB_PASSWORD', '1234')
    dbname = os.getenv('DB_NAME', 'sales')

    conn = psycopg2.connect("dbname="+dbname+" user="+user+" password="+password,
                            cursor_factory=psycopg2.extras.DictCursor, host='127.0.0.1', port='5432')
    cur = conn.cursor()
    
    # For EMF queries, we need the whole sales table
    if not 'group-by-sql/5.sql'.endswith('.sql'):
        cur.execute("SELECT * FROM sales")

    _global = []
    
    # Execute raw SQL query
    sql_query = """
SELECT 
    main.cust,
    main.prod,
    self_avg.avg_quant AS avg_1_quant,
    others_avg.avg_quant AS avg_2_quant
FROM 
    (SELECT DISTINCT cust, prod FROM sales) main
JOIN 
    (SELECT 
        cust, prod,
        AVG(quant) AS avg_quant
     FROM 
        sales
     GROUP BY 
        cust, prod) self_avg
ON 
    main.cust = self_avg.cust AND 
    main.prod = self_avg.prod
JOIN 
    (SELECT 
        s1.prod,
        s1.cust,
        AVG(s2.quant) AS avg_quant
     FROM 
        (SELECT DISTINCT prod, cust FROM sales) s1
     JOIN 
        sales s2
     ON 
        s1.prod = s2.prod AND 
        s1.cust != s2.cust
     GROUP BY 
        s1.prod, s1.cust) others_avg
ON 
    main.cust = others_avg.cust AND 
    main.prod = others_avg.prod
WHERE 
    others_avg.avg_quant > self_avg.avg_quant

    """
    
    # Use a generator to efficiently process results
    def result_generator():
        cur.execute(sql_query)
        while True:
            rows = cur.fetchmany(100)  # Fetch in batches for efficiency
            if not rows:
                break
            for row in rows:
                yield row
    
    # Create PrettyTable for output
    table = PrettyTable()
    
    # Get column names from cursor description
    if cur.description:
        table.field_names = [desc[0] for desc in cur.description]
    
    # Add rows to table
    for row in result_generator():
        if isinstance(row, dict):
            table.add_row([row.get(field) for field in table.field_names])
        else:
            table.add_row(row)
    
    return table


if "__main__" == __name__:
    print(query())
    