
import os
import psycopg2
import psycopg2.extras
from prettytable import PrettyTable
from dotenv import load_dotenv

# DO NOT EDIT THIS FILE, IT IS GENERATED BY generator.py


def query():
    load_dotenv()

    user = os.getenv('DB_USER')
    password = os.getenv('DB_PASSWORD')
    dbname = os.getenv('DB_NAME')

    conn = psycopg2.connect("dbname="+dbname+" user="+user+" password="+password,
                            cursor_factory=psycopg2.extras.DictCursor, host='127.0.0.1', port='5432')
    cur = conn.cursor()
    cur.execute("SELECT * FROM sales")

    _global = []
    
    class QueryStruct:
            cust = ""
        prod = ""
        avg_1_quant_sum = 0
        avg_1_quant_count = 0
        avg_1_quant = 0
        avg_2_quant_sum = 0
        avg_2_quant_count = 0
        avg_2_quant = 0

    data = []

    # For all the grouping variables
    group_by_map = dict()

    for row in cur:
        key = (row.get('cust'), row.get('prod'))
        if (not group_by_map.get(key)) and (group_by_map.get(key) != 0):
            data.append(QueryStruct())
            group_by_map[key] = len(data) - 1

        pos = group_by_map.get(key)
        data[pos].cust = row.get('cust')
        data[pos].prod = row.get('prod')

    # We need to compute values to the aggregate functions with their corresponding grouping variable predicate.
    cur.scroll(0, mode='absolute')

    for row in cur:
        key = (row.get('cust'), row.get('prod'))
        pos = group_by_map.get(key)
        cust = data[pos].cust
        prod = data[pos].prod
        avg_1_quant = data[pos].avg_1_quant
        avg_2_quant = data[pos].avg_2_quant

        if row.get('cust')==cust and row.get('prod')==prod:
            data[pos].avg_1_quant_sum += row.get('quant')
            data[pos].avg_1_quant_count += 1

            if data[pos].avg_1_quant_count != 0:
                data[pos].avg_1_quant = data[pos].avg_1_quant_sum / data[pos].avg_1_quant_count
            else:
                data[pos].avg_1_quant = 'Infinity'
    cur.scroll(0, mode='absolute')

    for row in cur:
        key = (row.get('cust'), row.get('prod'))
        pos = group_by_map.get(key)
        cust = data[pos].cust
        prod = data[pos].prod
        avg_1_quant = data[pos].avg_1_quant
        avg_2_quant = data[pos].avg_2_quant

        if row.get('cust')!=cust and row.get('prod')==prod:
            data[pos].avg_2_quant_sum += row.get('quant')
            data[pos].avg_2_quant_count += 1

            if data[pos].avg_2_quant_count != 0:
                data[pos].avg_2_quant = data[pos].avg_2_quant_sum / data[pos].avg_2_quant_count
            else:
                data[pos].avg_2_quant = 'Infinity'

    # Apply HAVING clause if present
    data = [obj for obj in data if obj.avg_2_quant>obj.avg_1_quant]


    operations_dict = {'cust': {'found': False}, 'prod': {'found': False}, 'avg_1_quant': {'found': False}, 'avg_2_quant': {'found': False}}
    table = PrettyTable()
    table.field_names = ['cust', 'prod', 'avg_1_quant', 'avg_2_quant']

    for obj in data:
        temp = []

        for j in table.field_names:
            if not operations_dict[j]['found']:
                temp.append(getattr(obj, j))
            else:
                # Replicated original logic for constructing and evaluating expression strings.
                if not (operations_dict[j]['operand1'].isnumeric() or operations_dict[j]['operand2'].isnumeric()):
                    # Case: Both operands are likely attributes (not numeric literals).
                    # Construct the expression string for eval() using getattr for attribute access.
                    value = eval(f"{getattr(obj, operations_dict[j]['operand1'])} {operations_dict[j]['operator']} {getattr(obj, operations_dict[j]['operand2'])}") # Use the template string
                    temp.append(value)
                else:
                    # Case: At least one operand is a numeric literal.
                    # Determine which operand is the numeric literal.
                    is_1_int = True if operations_dict[j]['operand1'].isnumeric() else False
                    is_2_int = True if operations_dict[j]['operand2'].isnumeric() else False
                    # Construct the expression string for eval() based on which operand is numeric.
                    # Replicated original string construction directly.
                    int_expr_str = f"{operations_dict[j]['operand1']} {operations_dict[j]['operator']} {getattr(obj, operations_dict[j]['operand2'])}" if is_1_int else f"{getattr(obj, operations_dict[j]['operand1'])} {operations_dict[j]['operator']} {operations_dict[j]['operand2']}"
                    value = eval(int_expr_str) # Evaluate the constructed expression string
                    temp.append(value)
        table.add_row(temp)

    # Printing the table
    return table


if "__main__" == __name__:
    print(query())
    