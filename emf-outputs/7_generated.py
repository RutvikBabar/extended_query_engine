
import os
import psycopg2
import psycopg2.extras
from prettytable import PrettyTable
from dotenv import load_dotenv

# DO NOT EDIT THIS FILE, IT IS GENERATED BY generator.py


def query():
    load_dotenv()

    user = os.getenv('DB_USER', 'postgres')
    password = os.getenv('DB_PASSWORD', '1234')
    dbname = os.getenv('DB_NAME', 'sales')

    conn = psycopg2.connect("dbname="+dbname+" user="+user+" password="+password,
                            cursor_factory=psycopg2.extras.DictCursor, host='127.0.0.1', port='5432')
    cur = conn.cursor()
    cur.execute("SELECT * FROM sales")

    _global = []
    
    class QueryStruct:
        prod = ""
        min_1_price = float('inf')
        max_1_price = float('-inf')

    data = []

    group_by_map = dict()

    for row in cur:
        key = (row.get('prod'))
        if (not group_by_map.get(key)) and (group_by_map.get(key) != 0):
            data.append(QueryStruct())
            group_by_map[key] = len(data) - 1

        pos = group_by_map.get(key)
        data[pos].prod = row.get('prod')

    cur.scroll(0, mode='absolute')

    for row in cur:
        for pos in range(len(data)):
            prod = data[pos].prod
            min_1_price = data[pos].min_1_price
            max_1_price = data[pos].max_1_price

            if row.get('prod')==prod:
                if row.get('price') is not None:
                    data[pos].min_1_price = min(data[pos].min_1_price, row.get('price'))
    cur.scroll(0, mode='absolute')

    for row in cur:
        for pos in range(len(data)):
            prod = data[pos].prod
            min_1_price = data[pos].min_1_price
            max_1_price = data[pos].max_1_price

            if row.get('prod')==prod:
                if row.get('price') is not None:
                    data[pos].max_1_price = max(data[pos].max_1_price, row.get('price'))

    # Apply HAVING clause if present


    operations_dict = {'prod': {'found': False}, 'min_1_price': {'found': False}, 'max_1_price': {'found': False}}
    table = PrettyTable()
    table.field_names = ['prod', 'min_1_price', 'max_1_price']

    for obj in data:
        temp = []

        for j in table.field_names:
            if not operations_dict[j]['found']:
                temp.append(getattr(obj, j))
            else:
                if not (operations_dict[j]['operand1'].isnumeric() or operations_dict[j]['operand2'].isnumeric()):
                    value = eval(f"{getattr(obj, operations_dict[j]['operand1'])} {operations_dict[j]['operator']} {getattr(obj, operations_dict[j]['operand2'])}") # Use the template string
                    temp.append(value)
                else:
                    is_1_int = True if operations_dict[j]['operand1'].isnumeric() else False
                    is_2_int = True if operations_dict[j]['operand2'].isnumeric() else False
                    int_expr_str = f"{operations_dict[j]['operand1']} {operations_dict[j]['operator']} {getattr(obj, operations_dict[j]['operand2'])}" if is_1_int else f"{getattr(obj, operations_dict[j]['operand1'])} {operations_dict[j]['operator']} {operations_dict[j]['operand2']}"
                    value = eval(int_expr_str) # Evaluate the constructed expression string
                    temp.append(value)
        table.add_row(temp)

    # Printing the table
    return table


if "__main__" == __name__:
    print(query())
    